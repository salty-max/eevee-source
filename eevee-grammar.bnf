expression        → literal
                  | unary
                  | binary
                  | grouping
                  ;

literal           → NUMBER | STRING | "true" | "false" | "nil" ;
grouping          → "(" expression ")" ;
unary             → ( "-" | "!" ) expression ;
postfix           → (expression ( "++" | "--" )) ;
conditional       → expression "?" expression ":" expression ;
binary            → expression operator expression ;

operator          → "==" | "!=" | "<" | "<=" | ">" | ">="
                  | "+" | "+=" | "++" | "-" | "-=" | "--" | "*"
                  | "*=" | "/" | "/=" | "%" | "%=" | "?" | ":"
                  ;


program           → declaration* EOF ;
declaration       → varDecl
                  | statement
                  ;
statement         → exprStmt
                  | ifStmt
                  | whileStmt
                  | forStmt
                  | printStmt
                  | varDecl
                  | block
                  ;
block             → "{" declaration* "}" ;
exprStmt          → expression ";" ;
varDecl           → "let" IDENTIFIER ( "=" expression )? ";" ;
printStmt         → "print" expression ";" ;
ifStmt            → "if" expression "then" statement ( "else" statement )? "end" ;
whileStmt         → "while" expression statement ;
forStmt           → "for" ( varDecl | exprStmt | "," )
                    expression? ","
                    expression? statement ;


expression        → assignment ;
assignment        → IDENTIFIER "=" assignment
                  | conditional ;
conditional       → logic_or ( "?" expression ":" conditional)? ;
logic_or          → logic_and ( "or" logic_and )* ;
logic_and         → equality ( "and" equality )* ;
equality          → comparison ( ( "!=" | "==" ) comparison )* ;
comparison        → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term              → factor ( ( "-" | "+" ) factor )* ;
factor            → unary ( ( "/" | "*" ) unary )* ;
unary             → ( "!" | "-" | "--" | "++" ) unary
                  | postfix ;
postfix           → primary ( "--" | ++" )* ;
primary           → NUMBER | STRING | "true" | "false" | "nil"
                  | "(" expression ")"
                  // Error productions...
                  | ( "!=" | "==" ) equality
                  | ( ">" | ">=" | "<" | "<=" ) comparison
                  | ( "+" ) term
                  | ( "/" | "*" ) factor ;
